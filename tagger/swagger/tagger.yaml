swagger: "2.0"

info:
  title: "Fanlens Tagger API"
  version: "2"

schemes:
  - https

basePath: /v2/tagger

securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: query

security:
  - api_key: []

produces:
  - application/json

paths:
  /:
    get:
      produces:
        - text/html
      responses:
        200:
          description: The tagger Web UI

  /comments/_random:
    get:
      summary: Get a list of random comments
      parameters:
      - name: count
        in: query
        description: number of comments to fetch
        required: false
        type: integer
        format: int32
        default: 8
        minimum: 0
        maximum: 30
      - name: sources
        in: query
        description: the sources to fetch data from
        required: false
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 128
        maxItems: 10
        uniqueItems: true
      - name: with_entity
        in: query
        description: should the object body be included?
        type: boolean
        required: false
        default: false
      - $ref: '#/parameters/WithSuggestion'
      responses:
        200:
          description: A Bundle of Comments
          schema:
            type: object
            properties:
              comments:
                type: array
                items:
                  $ref: '#/definitions/Comment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/comments/{comment_id}':
    get:
      parameters:
      - $ref: '#/parameters/CommentId'
      - $ref: '#/parameters/WithSuggestion'
      responses:
        200:
          description: The comment
          schema:
           $ref: '#/definitions/Comment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/comments/{comment_id}/{field_id}':
    get:
      consumes: [application/json]
      parameters:
      - $ref: '#/parameters/CommentId'
      - $ref: '#/parameters/FieldId'
      responses:
        200:
          description: A skeleton of the comment with the requested field
          schema:
           $ref: '#/definitions/Comment'
        404:
          description: No comment with provided ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/comments/{comment_id}/tags':
    patch:
      summary: Modify tags of comment
      consumes: [application/json]
      parameters:
      - $ref: '#/parameters/CommentId'
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            add:
              $ref: '#/definitions/TagSet'
            rem:
              $ref: '#/definitions/TagSet'
      responses:
        200:
          description: The comment
          schema:
           $ref: '#/definitions/Comment'
        400:
          description: Cannot patch the tags
          schema:
            $ref: '#/definitions/Error'
        404:
          description: No comment with provided ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /suggestion:
    post:
      summary: Get suggestions for a provided text
      consumes: [application/json]
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          required: [text]
          properties:
            text:
              type: string
              minLength: 64
              maxLength: 7000
              description: The text to fetch suggestions for. English only atm.
      responses:
        200:
          description: A Suggestion Bundle
          schema:
            type: object
            required: [suggestion]
            properties:
              text:
                type: string
              suggestion:
                $ref: '#/definitions/Suggestion'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /sources/:
    get:
      summary: Get sources of current user
      responses:
        200:
          description: A Bundle of Comments
          schema:
            type: object
            properties:
              sources:
                type: array
                items:
                  $ref: '#/definitions/Source'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/:
    get:
      summary: Get all tags of current user
      responses:
        200:
          description: All tags of current user
          schema:
            type: object
            properties:
              tags:
                $ref: '#/definitions/TagSet'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/_counts:
    get:
      summary: Get all tags and their counts of current user
      responses:
        200:
          description: All tags of current user
          schema:
            type: object
            properties:
              tags:
                $ref: '#/definitions/TagCounts'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tagsets/:
    get:
      summary: Get tagsets of current user
      parameters:
      - name: include_all
        in: query
        type: boolean
        description: include a key '_all' that contains all tags
        required: false
        default: false
      responses:
        200:
          description: A Bundle of TagSets
          schema:
            type: object
            properties:
              tagSets:
                type: object
                additionalProperties:
                  $ref: '#/definitions/MetaTagSet'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/model/{model_id}':
    get:
      summary: Get meta information about a trained model
      parameters:
      - name: model_id
        in: path
        type: string
        format: uuid
        required: true
        description: The id of this model
      responses:
        200:
          description: Information about the trained model. Includes 'score' for admin roles
          schema:
            $ref: '#/definitions/Model'
        403:
          description: Model not associated to user
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/model/_search':
    post:
      summary: Get meta information about a trained model
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            sources:
              type: array
              items:
                $ref: '#/definitions/Source'
              uniqueItems: true
              description: list of sources to use, empty list means all
            tagsetId:
              type: number
              format: int32
              description: the tagset id to find, must be accessible by user
      responses:
        200:
          description: Information about the best trained model. Includes 'score' for admin roles
          schema:
            $ref: '#/definitions/Model'
        400:
          description: No criterium specified
          schema:
            $ref: '#/definitions/Error'
        404:
          description: No model found for this query
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/model':
    post:
      summary: Train a new model for a tagset based on sources (or all sources)
      consumes: [application/json]
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          required: [sources, tagsetId]
          properties:
            sources:
              type: array
              items:
                $ref: '#/definitions/Source'
              uniqueItems: true
              description: list of sources to use, empty list means all
            tagsetId:
              type: number
              format: int32
              description: the tagset id to find, must be accessible by user
      - name: fast
        in: query
        type: boolean
        required: false
        default: true
        description: Reuse model parameters and only use data
      responses:
        202:
          description: Model creation has been initiated.
          schema:
            $ref: '#/definitions/Job'
        409:
          description: Model creation for this tagset is currently in progress, see job reference.
          schema:
            $ref: '#/definitions/Job'
        403:
          description: Source or tagset not associated with user
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  '/model/_jobs/{job_id}':
    get:
      summary: Get info about progress of model training. Can be used for auto REST polling.
      parameters:
      - $ref: '#/parameters/JobId'
      responses:
        201:
          description: Model creation has finished
          headers:
            Location:
              type: string
              format: url
              description: Url of the created model
        304:
          description: Model not ready yet. Can be used for automatic polling if the client supports the 'Retry-After' header.
          headers:
            Location:
              type: string
              format: url
              description: Loop back to the job status for auto polling.
            Retry-After:
              type: number
              format: int32
              description: The amount of seconds to wait before retrying.
        403:
          description: You are not the owner of this job
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Job does not exist
          schema:
            $ref: '#/definitions/Error'
        410:
          description: Model creation failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Cancel a running job.
      parameters:
      - $ref: '#/parameters/JobId'
      responses:
        200:
          description: Job cancelled succesfully
          schema:
            type: object
            required: [jobId]
            properties:
              jobId:
                type: string
                format: uuid
                description: The job id provided
        403:
          description: You are not the owner of this job
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Job not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

parameters:
  CommentId:
    name: comment_id
    in: path
    type: string
    minLength: 1
    maxLength: 128
    required: true

  FieldId:
    name: field_id
    in: path
    type: string
    enum:
      - tags
      - suggestion
      - message
      - user
    required: true

  WithSuggestion:
    name: with_suggestion
    in: query
    description: should a predicition be made?
    type: boolean
    required: false
    default: false

  JobId:
    name: job_id
    in: path
    type: string
    format: uuid
    required: true
    description: The job id provided

definitions:
  Comment:
    type: object
    required: [id]
    properties:
      id:
        type: string
        minLength: 1
        maxLength: 128
      message:
        type: string
      page:
        $ref: '#/definitions/Source'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      suggestion:
        $ref: '#/definitions/Suggestion'
      user:
        $ref: '#/definitions/User'

  Suggestion:
    type: object
    additionalProperties:
      type: number
      format: float
      minimum: 0.0
      maximum: 1.0
      description: Probability of suggestion

  User:
    type: object
    required: [id]
    properties:
      id: { type: string }
      name: { type: string }

  Tag:
    type: string
    minLength: 1
    maxLength: 32

  MetaTagSet:
    type: object
    properties:
      id:
        type: [string, integer]
        format: string
      title:
        type: string
        format: string
      tags:
        $ref: '#/definitions/TagSet'

  TagSet:
    type: array
    items:
      $ref: '#/definitions/Tag'
    uniqueItems: true
    maxItems: 100

  TagCounts:
    type: object
    additionalProperties:
      type: integer
      format: int32
      minimum: 0

  Source:
    type: string
    minLength: 1
    maxLength: 128

  Error:
    type: object
    properties:
      message:
        type: string

  Job:
    type: object
    required: [jobId]
    properties:
      jobId:
        type: string
        format: uuid
      jobUrl:
        type: string
        format: url
        description: You can get info about the currently running job or cancel it under this url

  Model:
    type: object
    required: [modelId, trainedTs]
    properties:
      modelId:
        type: string
        format: uuid
        description: The id of this model
      trainedTs:
        type: string
        format: date-time
        description: The timestamp when this model was created
      score:
        type: number
        format: float
        minimum: 0.0
        maximum: 1.0
        description: The f1 score of the model, restricted access
      params:
        type: object
        description: The model parameters, restricted access
        additionalProperties:
          type: string
          format: string
