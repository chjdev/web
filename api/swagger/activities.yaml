swagger: "2.0"

info:
  title: "Fanlens Activities API"
  version: "3.0.0"
  description: '
Fanlens API to handle "activities". Predictions are performed automatically, for managing the prediction models and retrieving free form predictions please switch to the [Model API](/v3/model/ui/).

## Concepts

The API consists of 3 main concepts: sources, activities and tags (bundled in tagsets).

* An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet.

* A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported.

* A tag is a piece of meta information that is used to build specialized speech models, e.g. "positive", or "negative". They are bundled in tagsets for convenience, e.g. "Emotion".'

schemes:
  - https

basePath: /v3/activities

securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization-Token
    in: header

security:
  - api_key: []

produces:
  - application/json

paths:
  /:
    post:
      summary: Import a bulk of activities
      description: The data field format is source dependent
      tags: [import]
      parameters:
      - name: import_activities
        in: body
        required: true
        schema:
          type: object
          properties:
            activities:
              type: array
              items:
                $ref: '#/definitions/Import'
      responses:
        201:
          description: A list of created activities
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        400:
          description: Bad object
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /{source_ids}/:
    get:
      summary: Get a list of activities
      tags: [activity]
      parameters:
      - $ref: '#/parameters/SourceIds'
      - name: count
        in: query
        description: number of activities to fetch
        required: false
        type: integer
        format: int32
        default: 8
        minimum: 0
        maximum: 500
      - $ref: '#/parameters/Random'
      - name: max_id
        in: query
        description: used for cursoring
        type: string
        minLength: 1
        maxLength: 128
        required: false
      - name: since
        in: query
        description: DateTime of oldest entry
        type: string
        format: date-time
        required: false
      - name: until
        in: query
        description: DateTime of newest entry
        type: string
        format: date-time
        required: false
      - $ref: '#/parameters/TagsetIds'
#      - $ref: '#/parameters/Tags'
      responses:
        200:
          description: A list of Activitys
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /{source_id}/{activity_id}:
    get:
      summary: Get this activity
      tags: [activity]
      parameters:
      - $ref: '#/parameters/SourceId'
      - $ref: '#/parameters/ActivityId'
      responses:
        200:
          description: The activity
          schema:
           $ref: '#/definitions/Activity'
        404:
          description: Activity not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Create or update this activity
      description: The data field format is source dependent
      tags: [activity, import]
      parameters:
      - $ref: '#/parameters/SourceId'
      - $ref: '#/parameters/ActivityId'
      - name: activity_import
        in: body
        required: true
        schema:
          $ref: '#/definitions/Import'
      responses:
        200:
          description: Success
        400:
          description: Bad object
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete this activity
      tags: [activity, import]
      parameters:
      - $ref: '#/parameters/SourceId'
      - $ref: '#/parameters/ActivityId'
      responses:
        200:
          description: Success
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /{source_id}/{activity_id}/{field_id}:
    get:
      summary: Get specific field of activity
      tags: [activity]
      consumes: [application/json]
      parameters:
      - $ref: '#/parameters/SourceId'
      - $ref: '#/parameters/ActivityId'
      - $ref: '#/parameters/FieldId'
      responses:
        200:
          description: A skeleton of the activity with the requested field
          schema:
           $ref: '#/definitions/Activity'
        404:
          description: No activity with provided ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /{source_id}/{activity_id}/tags:
    patch:
      summary: Modify tags of activity
      tags: [activity]
      consumes: [application/json]
      parameters:
      - $ref: '#/parameters/SourceId'
      - $ref: '#/parameters/ActivityId'
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            add:
              $ref: '#/definitions/Tags'
            remove:
              $ref: '#/definitions/Tags'
      responses:
        200:
          description: The activity
          schema:
           $ref: '#/definitions/Activity'
        400:
          description: Cannot patch the tags
          schema:
            $ref: '#/definitions/Error'
        404:
          description: No activity with provided ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /sources/:
    get:
      summary: Get sources of current user
      tags: [sources]
      responses:
        200:
          description: List of sources for current user
          schema:
            type: object
            properties:
              sources:
                type: array
                items:
                  $ref: '#/definitions/Source'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new Source
      description: 'Currently supported types: facebook, twitter, generic'
      tags: [sources]
      parameters:
      - name: source
        in: body
        required: true
        schema:
          $ref: '#/definitions/Source'
      responses:
        201:
          description: Source created
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /sources/{source_id}:
    get:
      summary: Get source
      tags: [sources]
      parameters:
      - $ref: '#/parameters/SourceId'
      responses:
        200:
          description: The source
          schema:
            $ref: '#/definitions/Source'
        404:
          description: Source does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update the source
      tags: [sources]
      parameters:
      - $ref: '#/parameters/SourceId'
      - name: source
        in: body
        required: true
        schema:
          $ref: '#/definitions/Source'
      responses:
        200:
          description: Source updated
        403:
          description: Updating immutable field
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Source does not exist, please use POST /sources/ to create a new source
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Remove the source, **WARNING!** This will remove all data associated with the source!'
      description: '**WARNING!** This will remove all data associated with the source!'
      tags: [sources]
      parameters:
      - $ref: '#/parameters/SourceId'
      responses:
        200:
          description: Source removed from the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/:
    get:
      summary: Get all tags of current user
      tags: [tags]
      parameters:
      - name: with_count
        in: query
        description: should the tag counts be included
        type: boolean
        required: false
        default: false
      responses:
        200:
          description: All tags of current user
          schema:
            type: object
            required: [tags]
            properties:
              tags:
                $ref: '#/definitions/Tags'
              count:
                $ref: '#/definitions/TagCounts'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /{source_ids}/tags/:
    get:
      summary: Get tags of source_ids
      tags: [tags]
      parameters:
      - $ref: '#/parameters/SourceIds'
      - name: with_count
        in: query
        description: should the tag counts be included
        type: boolean
        required: false
        default: true
      responses:
        200:
          description: All tags requested sources
          schema:
            type: object
            required: [tags]
            properties:
              tags:
                $ref: '#/definitions/Tags'
              count:
                $ref: '#/definitions/TagCounts'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/{tag}:
    get:
      summary: Get this tag
      tags: [tags]
      parameters:
      - $ref: '#/parameters/Tag'
      - name: with_count
        in: query
        description: should the tag count be included
        type: boolean
        required: false
        default: false
      responses:
        200:
          description: The tag and optionall it's count
          schema:
            type: object
            required: [tag]
            properties:
              tag:
                $ref: '#/definitions/Tag'
              count:
                type: integer
                format: int32
                minimum: 0
        404:
          description: Tag not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Add tag to the system
      tags: [tags]
      parameters:
      - $ref: '#/parameters/Tag'
      responses:
        200:
          description: Tag added
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove tag and all it's associations from the system
      tags: [tags]
      parameters:
      - $ref: '#/parameters/Tag'
      responses:
        200:
          description: Tag removed from the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/{tag}/activities/:
    get:
      summary: Get activities tagged with this tag
      tags: [tags, activity]
      parameters:
      - $ref: '#/parameters/Tag'
      - $ref: '#/parameters/Random'
      - name: count
        in: query
        type: integer
        format: int32
        minimum: 1
        required: true
        default: 10
      responses:
        200:
          description: A list of Activitys
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /{source_ids}/tags/{tag}/activities/:
    get:
      summary: Get activities tagged with this tag for source_id
      tags: [tags, activity]
      parameters:
      - $ref: '#/parameters/SourceIds'
      - $ref: '#/parameters/Tag'
      - $ref: '#/parameters/Random'
      - name: count
        in: query
        type: integer
        format: int32
        minimum: 1
        required: true
        default: 10
      responses:
        200:
          description: A list of Activitys
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /tagsets/:
    get:
      summary: Get tagsets of current user
      tags: [tagsets]
      responses:
        200:
          description: A list of TagSets
          schema:
            type: object
            properties:
              tagSets:
                type: array
                items:
                  $ref: '#/definitions/TagSet'
                uniqueItems: true
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create new tagset
      tags: [tagsets]
      parameters:
      - name: tagset
        in: body
        required: true
        schema:
          $ref: '#/definitions/TagSet'
      responses:
        201:
          description: TagSet created
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tagsets/{tagset_id}:
    get:
      summary: Get tagset
      tags: [tagsets]
      parameters:
      - $ref: '#/parameters/TagsetId'
      responses:
        200:
          description: The tagset
          schema:
            $ref: '#/definitions/TagSet'
        404:
          description: TagSet does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update the tagset
      tags: [tagsets]
      parameters:
      - $ref: '#/parameters/TagsetId'
      - name: tagset
        in: body
        required: true
        schema:
          $ref: '#/definitions/TagSet'
      responses:
        200:
          description: TagSet updated
        403:
          description: Updating immutable field
          schema:
            $ref: '#/definitions/Error'
        404:
          description: TagSet does not exist, please use POST /tagsets/ to create a new tagset
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove the tagset
      tags: [tagsets]
      parameters:
      - $ref: '#/parameters/TagsetId'
      responses:
        200:
          description: Tagset removed from the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tagsets/{tagset_id}/activities/:
    get:
      summary: Get activities tagged with this tagset
      tags: [tagsets, activity]
      parameters:
      - $ref: '#/parameters/TagsetId'
      - $ref: '#/parameters/Random'
      - name: count
        in: query
        type: integer
        format: int32
        minimum: 1
        required: true
        default: 10
      responses:
        200:
          description: A list of Activitys
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /{source_ids}/tagsets/{tagset_id}/activities/:
    get:
      summary: Get activities tagged with this tagset
      tags: [tagsets, activity]
      parameters:
      - $ref: '#/parameters/TagsetId'
      - $ref: '#/parameters/SourceIds'
      - $ref: '#/parameters/Random'
      - name: count
        in: query
        type: integer
        format: int32
        minimum: 1
        required: true
        default: 10
      responses:
        200:
          description: A list of Activitys
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tagsets/{tagset_id}/{tag}:
    put:
      summary: Add tag to the tagset
      tags: [tagsets]
      parameters:
      - $ref: '#/parameters/TagsetId'
      - $ref: '#/parameters/Tag'
      responses:
        200:
          description: Tag added
        404:
          description: TagSet does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove tag from tagset
      tags: [tagsets]
      parameters:
      - $ref: '#/parameters/TagsetId'
      - $ref: '#/parameters/Tag'
      responses:
        200:
          description: Tag removed from the tagset
        404:
          description: TagSet does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


parameters:
  ActivityId:
    name: activity_id
    in: path
    type: string
    minLength: 1
    maxLength: 128
    required: true

  Tag:
    name: tag
    in: path
    type: string
    minLength: 1
    maxLength: 32
    required: true

  SourceId:
    name: source_id
    in: path
    required: true
    type: integer

  TagsetId:
    name: tagset_id
    in: path
    required: true
    type: integer

  SourceIds:
    name: source_ids
    in: path
    required: true
    type: array
    items:
      type: integer
    uniqueItems: true
    collectionFormat: csv
    maxItems: 10

  TagsetIds:
    name: tagset_ids
    in: query
    required: false
    type: array
    items:
      type: integer
    uniqueItems: true
    collectionFormat: csv
    maxItems: 10


  FieldId:
    name: field_id
    in: path
    type: string
    enum:
      - tags
      - prediction
      - text
      - user
      - created_time
      - source
      - language
    required: true

  Random:
    name: random
    in: query
    description: should a random sample be drawn
    type: boolean
    required: false
    default: false

definitions:
  Import:
    type: object
    required: [data]
    properties:
      id:
        type: string
        minLength: 1
        maxLength: 128
      data:
        type: object
        description: The original data, e.g. Facebook JSON comment. Format depends on source type.
      source_id:
        description: Id of the source this import belongs to. Required only for bulk imports.
        type: integer

  Activity:
    type: object
    required: [id]
    properties:
      id:
        type: string
        minLength: 1
        maxLength: 128
      text:
        type: string
      source:
        $ref: '#/definitions/Source'
      tags:
        $ref: '#/definitions/Tags'
      prediction:
        $ref: '#/definitions/Prediction'
      user:
        $ref: '#/definitions/User'
      language:
        description: Inferred language of text
        type: string
        minLength: 2
        maxLength: 2
      created_time:
        description: DateTime of creation
        type: string
        format: date-time

  Prediction:
    type: object
    description: 'A dict object of the form "Tag: Predicted Score in %"'
    additionalProperties:
      type: number
      format: float
      minimum: 0.0
      maximum: 1.0
      description: Probability of prediction

  User:
    description: The user causing the activitiy
    type: object
    required: [id]
    properties:
      id:
        type: string
        description: A consistent, machine readable user id
      name:
        type: string
        description: A human readable user name

  Tag:
    description: Tags are arbitrary strings
    type: string
    minLength: 1
    maxLength: 32

  Tags:
    type: array
    description: A set of tags
    items:
      $ref: '#/definitions/Tag'
    uniqueItems: true

  TagSet:
    type: object
    description: A set of tags
    properties:
      id:
        type: integer
        description: Assigned by the system
      title:
        type: string
        format: string
        description: Human readable title of this tag set
      tags:
        $ref: '#/definitions/Tags'

  TagCounts:
    type: object
    description: 'A dict object of the form "Tag: Count"'
    additionalProperties:
      type: integer
      minimum: 0

  Source:
    type: object
    description: Source representation
    properties:
      id:
        type: integer
        description: Assigned by the system
      type:
        type: string
        description: Source type (forces specific data format)
        enum:
        - facebook
        - twitter
#        - crunchbase
        - generic
      uri:
        type: string
        format: url
        description: Canoncial URI of the source, e.g. Twitter account URI.
      slug:
        type: string
        minLength: 1
        maxLength: 128
        description: Identifier for the URI. Required for Twitter and Facebook sources.

  Error:
    type: object
    properties:
      error:
        type: string
        description: Error message
